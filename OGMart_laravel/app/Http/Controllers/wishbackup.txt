<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\wishlist;;
use App\Models\product_stock;

use DB;

class WishlistController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $categorydata = wishlist::get();
      return response()->json($categorydata);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
   


    public function addtowishlist(Request $request)
    {
        $mac_address = exec('getmac'); // Get the MAC address using the getmac command
      $mac_address = strtok($mac_address, ' '); // Extract the first MAC address
      $uid = $request->get('uid');
      if (!isset($uid)) {
          $mac_address = exec('getmac');
          $mac_address = strtok($mac_address, ' ');
          $uid = $mac_address;
      }
      else {

        $uid = $request->get('uid');
        $pid = $request->get('pid');
        $pqty = $request->get('pqty');
        $datetime = $request->get('datetime');



        // Retrieve the current stock quantity of the product
        $product_stock = DB::table('product_stocks')
                            ->select('qty')
                            ->where('pid', '=', $pid)
                            ->first();

        // Check if the requested quantity is greater than the available stock quantity
        if ($pqty > $product_stock->qty) {
            return response()->json(['status' => 'error', 'msg' => 'Product is out of stock']);
        }

          $arr=array();      
        $data = array();
// Check if the product already exists in the user's wishlist
   


    $wishlistItem = wishlist::where('uid', $uid)->where('pid', $pid)->first();

    if ($wishlistItem) {
        // Update the existing item with the new quantity
        $wishlistItem->pqty += $pqty;
        $wishlistItem->save();
    } else {


$wishlist = new wishlist([
            'uid' => $uid,
            'pid' => $pid,
            'pqty' => $pqty,
            'datetime' => $datetime,
        ]);
        $wishlist->save();
       
    }


    $data['status'] = "success";
    $data['msg'] = "data Insert";
    array_push($arr, $data);
    return response()->json($arr);

}
}

public function wishlistshow($id)
{
  $pro=DB::table('wishlists')
      ->join('products','wishlists.pid','=','products.id')
      ->where('wishlists.uid','=',$id)
      ->select('products.*', DB::raw('SUM(wishlists.qty) as qty'), 'wishlists.id as cid')
      ->groupBy('products.id')
      ->get();
    return $pro;
}


    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $wishlist = wishlist::find($id);   
        $wishlist->delete();

        return response()->json($wishlist);
    }

    public function clear()
{
    Wishlist::truncate();
    return response()->json(['message' => 'Wishlist cleared successfully']);
}
}
